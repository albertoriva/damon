#!/bin/bash

prog=$(basename $0)

export PIPELINE_HOME=${HPC_DIBIGTOOLS_DIR}/../pipelines
export PYTHONPATH=${PIPELINE_HOME}:${HPC_DIBIGTOOLS_DIR}/python/:${PYTHONPATH}

usage() {
  echo "Usage: $prog [-d] [-r] [-n] [-y] <configuration-file> [options]"
  echo "       $prog -h"
  echo
  echo "For regular usage, call $prog with the name of a"
  echo "configuration file as its argument. Using '-d' will"
  echo "call $prog in debug mode (and with no zip file creation"
  echo "at the end)."
  echo
  echo "The '-r' options runs the pipeline in dry-run mode. Effectively"
  echo "the same as prefixing all pipeline steps with -."
  echo
  echo "The '-y' option causes the script to run in unattended"
  echo "mode: it will not wait for user to press Enter before"
  echo "starting, and will not warn if the output directory exists."
  echo
  echo "The '-n' command will generate a new configuration file"
  echo "template. The name of the run, that will also be used as the"
  echo "name of the configuration file, can be passed on the command"
  echo "line. Otherwise, the program will prompt for it."
  echo
  echo "The '-h' option displays a short description of the program "
  echo "and provides an example configuration file."
  echo
  echo "Â© 2015-2018, A. Riva, ICBR Bioinformatics, University of Florida."
}

newconf() {
  source ${PIPELINE_HOME}/confsamples/${prog}.confsample
}

## Main starts here

case $prog in 
  rnaseq|chipseq|atacseq|generep2|dmap2|snpcall|ma|scell|cutandrun)
    script=${PIPELINE_HOME}/${prog}.py
    ;;
  *)
    echo "Unknown script ${prog}."
    echo "Known scripts: rnaseq, chipseq, cutandrun, atacseq, generep2, dmap2, ma, snpcall, scell"
    exit 1
    ;;
esac

conf=""
new=""
debug=""
zip="-Z"
yes=""

## Get conf file (first non-option)
for arg in $*;
do
    case $arg in
	-*)
	    ;;
	*)
	    conf=$arg
	    break
	    ;;
    esac
done

## Now parse command-line args

while getopts :hndyr ARG; do
    case $ARG in
	n)			# New
	    name=$conf
	    if [ "$name" == "" ];
	    then
		echo -n "Enter analysis name: "; read name
	    fi
	    conffile=${name}.conf
	    echo Writing $conffile
	    newconf > $conffile
	    echo "Please edit this configuration file to fit your needs,"
	    echo "then run the pipeline with: $prog $conffile."
	    exit
	    ;;
	d)
	    debug="-d"
	    zip=""
	    ;;
	r)
	    dry="-r"
	    ;;
	h)
	    usage
	    exit
	    ;;
	y)
	    yes="-y"
	    ;;
    esac
done

# If we get here, we need conf file; check that it was passed
if [ "$conf" == "" ];
then
  usage
  exit
fi

#if [ "$debug" == "-d" ];
#then 	
#  script=${PIPELINE_HOME}/${prog}-dev.py
#fi

if [ -f $conf ]
then
  shift
  shift
  act.py $debug $dry $zip $yes $script $conf $*
else
  echo Error: file $conf not found.
  echo
  usage
fi

